import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command

TOKEN = "8094268456:AAF6zYaMbnEVrXT7dCnnKHa4A-qaquDYnhA"
OWNER_IDS = [1383822774, 1118338651]

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
def is_owner(message: types.Message) -> bool:
    return message.from_user.id in OWNER_IDS

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–ø—Ä–æ—Å")],
        [KeyboardButton(text="–û—Ç–∑—ã–≤")],
        [KeyboardButton(text='–û–±–Ω—É–ª–µ–Ω–∏–µ')]
    ],
    resize_keyboard=True
)
async def track_action(user_id, action):
    await bot.send_message(1383822774, f"üìç –ú–∞—Ä—É—Å—è –Ω–∞–∂–∞–ª–∞: {action}")

# –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
waiting_for_reference = {}
waiting_for_feedback = {}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    if not is_owner(message):
        return
    await track_action(message.from_user.id, "–°—Ç–∞—Ä—Ç")
    photo = FSInputFile("cupon.png")
    await message.answer_photo(photo, caption="–ü—Ä–∏–≤–µ—Ç, –≤–æ—Ç –∫—É–ø–æ–Ω—á–∏–∫, –ø–æ–ª—å–∑—É–π—Å—è ‚ù§Ô∏è", reply_markup=keyboard)

@dp.message(lambda message: message.text == "–ó–∞–ø—Ä–æ—Å")
async def request_handler(message: types.Message):
    if not is_owner(message):
        return
    await track_action(message.from_user.id, "–ó–∞–ø—Ä–æ—Å")
    keyboard1 = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–µ—Ñ–µ—Ä–µ–Ω—Å —â–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é")],
            [KeyboardButton(text="–†–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–µ –±—É–¥–µ—Ç, —Å–∞–º –≤—ã–±–∏—Ä–∞–π")],
            [KeyboardButton(text='–ù–∞–∑–∞–¥')],
            [KeyboardButton(text='–û–±–Ω—É–ª–µ–Ω–∏–µ')]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ (—Ö–æ—Ç—å –±—ã –Ω–µ–º–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –ø–æ–ª—É—á–∏—Ç—å ü•∫)", reply_markup=keyboard1)

@dp.message(lambda message: message.text == "–û—Ç–∑—ã–≤")
async def review_handler(message: types.Message):
    if not is_owner(message):
        return
    await track_action(message.from_user.id, "–û—Ç–∑—ã–≤")
    user_id = message.from_user.id
    waiting_for_feedback[user_id] = {"step": "waiting_for_bouquet"}
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞! –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (–Ω–µ —Å–µ–ª—Ñ–∏, –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞)")

@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def back_to_start(message: types.Message):
    if not is_owner(message):
        return
    await track_action(message.from_user.id, "–ù–∞–∑–∞–¥")
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)



@dp.message(lambda message: message.text == "–û–±–Ω—É–ª–µ–Ω–∏–µ")
async def back_to_start(message: types.Message):
    if not is_owner(message):
        return
    await track_action(message.from_user.id, "–û–±–Ω—É–ª–µ–Ω–∏–µ")
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
    waiting_for_reference.clear()
    waiting_for_feedback.clear()


@dp.message(lambda message: message.from_user.id in waiting_for_feedback)
async def process_feedback(message: types.Message):
    await track_action(message.from_user.id, "–æ–∂–∏–¥–∞–π —Ñ–æ—Ç–∫—É")
    user_id = message.from_user.id
    step = waiting_for_feedback[user_id]["step"]

    if step == "waiting_for_bouquet" and message.photo:
        waiting_for_feedback[user_id]["bouquet_photo"] = message.photo[-1].file_id
        waiting_for_feedback[user_id]["step"] = "waiting_for_selfie"
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–µ–ª—Ñ–∏ —Å –±—É–∫–µ—Ç–æ–º.")
    elif step == "waiting_for_selfie" and message.photo:
        waiting_for_feedback[user_id]["selfie_photo"] = message.photo[-1].file_id
        waiting_for_feedback[user_id]["step"] = "waiting_for_rating"
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ –±—É–∫–µ—Ç –æ—Ç 1 –¥–æ 13.")
    elif step == "waiting_for_rating" and message.text.isdigit():
        rating = int(message.text)
        if 1 <= rating <= 13:
            waiting_for_feedback[user_id]["rating"] = rating
            await send_feedback_to_owner(user_id)
        else:
            await message.answer("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 13. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ü–µ–Ω–∫—É.")

async def send_feedback_to_owner(user_id):
    rating = waiting_for_feedback[user_id]["rating"]
    text = f"üå∏ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ú–∞—Ä—É—Å–∏:\n\n–û—Ü–µ–Ω–∫–∞: {rating}/13"
    await bot.send_photo(1383822774, waiting_for_feedback[user_id]["bouquet_photo"], caption="üì∑ –§–æ—Ç–æ –±—É–∫–µ—Ç–∞:")
    await bot.send_photo(1383822774, waiting_for_feedback[user_id]["selfie_photo"], caption="ü§≥ –°–µ–ª—Ñ–∏ —Å –±—É–∫–µ—Ç–æ–º:")
    await bot.send_message(1383822774, text)
    del waiting_for_feedback[user_id]
    await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@dp.message(lambda message: message.text == "–†–µ—Ñ–µ—Ä–µ–Ω—Å —â–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é")
async def reference_handler(message: types.Message):
    if not is_owner(message):
        return
    await track_action(message.from_user.id, "–©–∞ –±—É–¥–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å")
    waiting_for_reference[message.from_user.id] = True
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é!")

@dp.message(lambda message: message.from_user.id in waiting_for_reference and waiting_for_reference[message.from_user.id])
async def handle_reference(message: types.Message):
    user_id = message.from_user.id
    if message.photo:
        photo = message.photo[-1].file_id
        caption = message.caption if message.caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        await bot.send_photo(1383822774, photo, caption=f"üì∑ –†–µ—Ñ–µ—Ä–µ–Ω—Å –æ—Ç –ú–∞—Ä—É—Å–∏:\n\n{caption}")
    elif message.text:
        await bot.send_message(1383822774, f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –æ—Ç –ú–∞—Ä—É—Å–∏:\n\n{message.text}")
    del waiting_for_reference[user_id]
    await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")

@dp.message(lambda message: message.text == "–†–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–µ –±—É–¥–µ—Ç, —Å–∞–º –≤—ã–±–∏—Ä–∞–π")
async def no_reference_handler(message: types.Message):
    if not is_owner(message):
        return
    await track_action(message.from_user.id, "—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–µ –±—É–¥–µ—Ç")
    await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ 1-3 –¥–Ω—è.")
    await bot.send_message(1383822774, "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞, –≤—ã–±–∏—Ä–∞–π —á—Ç–æ –∑–∞—Ö–æ—á–µ—à—å (1-3 –¥–Ω—è).")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())